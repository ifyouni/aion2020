/*     */ package com.aionemu.gameserver.world;
/*     */ 
/*     */ public enum WorldMapType
/*     */ {
/*  18 */   PANDAEMONIUM, MARCHUTAN, MARCHUTAN_PRIORY, FATEBOUND_ABBEY, ISHALGEN, MORHEIM, ALTGARD, BELUSLAN, BRUSTHONIN, NORSVOLD, TOWER_OF_ETERNITY_A, ARENA_EVENT_D, PERNON, SANCTUM, KAISINEL, KAISINEL_ACADEMY, WISPLIGHT_ABBEY, POETA, ELTNEN, VERTERON, HEIRON, THEOBOMOS, ILUMA, TOWER_OF_ETERNITY_E, ARENA_EVENT_L, ORIEL, LIVE_PARTY_CONCERT_ALL, INGGISON_MASTER, CYGNEA, GRIFFOEN, IDIAN_DEPTHS_L, GELKMAROS_MASTER, ENSHAR, HABROK, IDIAN_DEPTHS_D, SILENTERA_CANYON, SILENTERA_CANYON_MASTER, TIAMARANTA_EYE, TIAMARANTA_EYE_MASTER, INGGISON, GELKMAROS, SARPAN, TIAMARANTA, KATALAM, DANARIA, ELEMENTIS_FOREST, KALDOR, LEVINSHOR, RESHANTA, BELUS, TRANSIDIUM_ANNEX, ASPIDA, ATANATOS, DISILLON, DE_PRISON, DF_PRISON, NO_ZONE_NAME, ID_TEST_DUNGEON, NOCHSANA_TRAINING_CAMP, DARK_POETA, CARPUS_ISLE_STONEROOM, SULFUR_TREE_NEST, HAMATE_ISLE_STONEROOM, LEFT_WING_CHAMBER, RIGHT_WING_CHAMBER, STEEL_RAKE, DREDGION, GRAVE_OF_STEEL_STONEROOM, TWILIGHT_BATTLEFIELD_STONEROOM, ISLE_OF_ROOTS_STONEROOM, UDAS_TEMPLE, UDAS_TEMPLE_LOWER, BESHMUNDIR_TEMPLE, TALOCS_HOLLOW, HARAMEL, DREDGION_OF_CHANTRA, ABYSSAL_SPLINTER, UNSTABLE_ABYSSAL_SPLINTER, KROMEDE_TRIAL, KARAMATIS_A, KARAMATIS_B, AERDINA, GERANAIA, AETHEROGENETICS_LAB, FRAGMENT_OF_DARKNESS, SLIVER_OF_DARKNESS, SANCTUM_UNDERGROUND_ARENA, TRINIEL_UNDERGROUND_ARENA, INDRATU_FORTRESS, AZOTURAN_FORTRESS, THEOBOMOS_LAB, ATAXIAR_A, ATAXIAR_B, ATAXIAR_C, BREGIRUN, NIDALBER, ARKANIS_TEMPLE, SPACE_OF_OBLIVION, SPACE_OF_DESTINY, DRAUPNIR_CAVE, FIRE_TEMPLE, ALQUIMIA_RESEARCH_CENTER, SHADOW_COURT_DUNGEON, ADMA_STRONGHOLD, ATAXIAR_D, ESOTERRACE, EMPYREAN_CRUCIBLE, CRUCIBLE_CHALLENGE, ARENA_OF_CHAOS, ARENA_OF_DISCIPLINE, CHAOS_TRAINING_GROUNDS, DISCIPLINE_TRAINING_GROUNDS, PADMARASHKA_CAVE, ATURAM_SKY_FORTRESS, EVENT_ATURAM_SKY_FORTRESS, RENTUS_BASE, STEEL_RAKE_CABIN, TERATH_DREDGION, ARENA_OF_HARMONY, SEALED_DANUAR_MYSTICARIUM, TIAMAT_STRONGHOLD, DRAGON_LORD_REFUGE, ETERNAL_BASTION, ARENA_OF_GLORY, SHUGO_IMPERIAL_TOMB, HARMONY_TRAINING_GROUND, OPHIDAN_BRIDGE, THE_HEXWAY, INFINITY_SHARD, UNITY_TRAINING_GROUNDS, DANUAR_RELIQUARY, KAMAR_BATTLEFIELD, SAURO_SUPPLY_BASE, SEIZED_DANUAR_SANCTUARY, ASTERIA_IU_SOLO, NIGHTMARE_CIRCUS, RUKIBUKI_CIRCUS_TROUPE_CAMP, ENGULFED_OPHIDAN_BRIDGE, IRON_WALL_WARFRONT, ILLUMINARY_OBELISK, LUCKY_OPHIDAN_BRIDGE, LUCKY_DANUAR_RELIQUARY, LINKGATE_FOUNDRY, IDGEL_DOME, LINKGATE_FOUNDRY_Q, INFERNAL_DANUAR_RELIQUARY, INFERNAL_ILLUMINARY_OBELISK, RAKSANG_RUINS, OCCUPIED_RENTUS_BASE, ANGUISHED_DRAGON_LORD_REFUGE, DANUAR_SANCTUARY, DRAKENSPIRE_DEPTHS, THE_SHUGO_EMPEROR_VAULT, STONESPEAR_REACH, SEALED_ARGENT_MANOR, DRAKENSPIRE_DEPTHS_Q, EMPEROR_TRILLIRUNERK_SAFE, ARCHIVES_OF_ETERNITY, ARCHIVES_OF_ETERNITY_Q, SANCTUARY_DUNGEON, ADMA_FALL, THEOBOMOS_TEST_CHAMBER, DRAKENSEER_LAIR, CONTAMINED_UNDERPATH, EVENT_CONTAMINED_UNDERPATH, IDEVENT_DEF_H, SECRET_MUNITIONS_FACTORY, CRADLE_OF_ETERNITY, TRIALS_OF_ETERNITY, ASHUNATAL_DREDGION, FALLEN_POETA, OPHIDAN_WARPATH, IDGEL_DOME_LANDMARK, AETHER_MINE, SMOLDERING_FIRE_TEMPLE, FISSURE_OF_OBLIVION, OPPORTUNITY_FISSURE_OF_OBLIVION, ARENA_OF_TENACITY, HALL_OF_TENACITY, KUMUKI_CAVE, DREDGION_DEFENSE_SANCTUM, DREDGION_DEFENSE_PANDAEMONIUM, BASTION_OF_SOULS, EVERGALE_CANYON, IDTM_ARENA_E_01, IDTM_LOBBY_E_01, IDTM_ARENA_P_01, IDTM_LOBBY_P_01, CRUCIBLE_SPIRE, IDTM_ARENA_P_02, IDTM_LOBBY_P_02, IDRUN, IDABRE_CORE_03, IDAB1_HEROES_L, IDAB1_HEROES_D, HOUSING_LC_LEGION, HOUSING_DC_LEGION, ORIEL_STUDIO, PERNON_STUDIO, TEST_BASIC, TEST_SERVER, TEST_GIANTMONSTER, HOUSING_BARRACK, TEST_EMPYREAN_CRUCIBLE, IDLDF5RE_TEST, TEST_KGW, TEST_BASIC_MJ, KAMAR_TEST, TEST_INTRO, TEST_SERVER_ART, TEST_TAG_MATCH, TEST_TIME_ATTACK, TOURNAMENT_STAGE_TEST, SYSTEM_BASIC, TOURNAMENT_LOBBY_TEST;
/*     */ 
/*     */   private final int worldId;
/*     */   private final boolean isPersonal;
/*     */ 
/*     */   public int getId()
/*     */   {
/* 298 */     return this.worldId;
/*     */   }
/*     */ 
/*     */   public boolean isPersonal() {
/* 302 */     return this.isPersonal;
/*     */   }
/*     */ 
/*     */   public static WorldMapType getWorld(int id) {
/* 306 */     for (WorldMapType type : values()) {
/* 307 */       if (type.getId() == id) {
/* 308 */         return type;
/*     */       }
/*     */     }
/* 311 */     return null;
/*     */   }
/*     */ }